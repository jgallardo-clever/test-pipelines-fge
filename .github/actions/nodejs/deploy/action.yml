name: Action para desplegar aplicaciones Node.js en IIS
description: Esta acción se encarga de desplegar aplicaciones Node.js en un servidor IIS.
inputs:
  ########################################################################
  # Conexión al servidor
  ########################################################################
  server_ip:
    description: 'Dirección IP del servidor donde se desplegará la aplicación'
    required: true
  remote_user:
    description: 'Usuario para conectarse al servidor remoto'
    required: true
  ########################################################################
  # Configuración de la aplicación
  ########################################################################
  project_path:
    description: 'Ruta de la aplicación en el servidor'
    required: true
  # app_name:
  #   description: 'Nombre de la aplicación a desplegar'
  #   required: true
  start_command:
    description: 'Comando para iniciar la aplicación con PM2'
    required: true
  app_port:
    description: 'Puerto de la aplicación'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Descargar artefacto desde GitHub Artifacts
      uses: actions/download-artifact@v4
      with:
        name: '${{ inputs.artifact_file_name }}'
        path: 'C:\artifacts\nodejs'

    - name: Desplegar aplicación en IIS
      run: |
        echo "Obtenemos nombre sin extensión del artefacto..."
        $appName = [System.IO.Path]::GetFileNameWithoutExtension("${{ inputs.artifact_file_name }}")
        echo "Nombre de la aplicación: $appName"
        echo "Instalar dependencias npm..."
        ssh ${{ inputs.remote_user }}@${{ inputs.server_ip }} "cd C:\artifacts\nodejs\$appName && npm install"
        echo "Eliminar proceso de la aplicación en PM2..."
        ssh ${{ inputs.remote_user }}@${{ inputs.server_ip }} pm2 stop $appName
        ssh ${{ inputs.remote_user }}@${{ inputs.server_ip }} pm2 delete $appName
        echo "Crear directorio del proyecto si no existe..."
        ssh ${{ inputs.remote_user }}@${{ inputs.server_ip }} if not exist \"${{ inputs.project_path }}\${{ inputs.app_name }}\" mkdir \"${{ inputs.project_path }}\${{ inputs.app_name }}\"
        echo "Mover archivos del directorio temporal a la ruta del proyecto..."
        ssh ${{ inputs.remote_user }}@${{ inputs.server_ip }} xcopy /y /s /e \"C:\artifacts\nodejs\${{ inputs.app_name }}\" \"${{ inputs.project_path }}\${{ inputs.app_name }}\"
      shell: cmd

    - name: Conceder permisos al directorio del proyecto
      run: |
        echo "Concediendo permisos al directorio del proyecto en el servidor remoto"
        ssh ${{ inputs.remote_user }}@${{ inputs.server_ip }} powershell -Command "icacls '${{ inputs.project_path }}\$appName' /grant 'IIS_IUSRS:(OI)(CI)M'"
      shell: powershell

    - name: Iniciar aplicación con PM2
      run: |
        echo "Parametros:"
        echo "  - Nombre de la aplicación: $appName"
        echo "  - Ruta del proyecto: ${{ inputs.project_path }}\$appName"
        echo "  - Comando de inicio: ${{ inputs.start_command }}"
        echo "  - Ruta completa: ${{ inputs.project_path }}\$appName\${{ inputs.start_command }}"
        echo "Iniciando aplicación..."
        # Si la variable start_command es igual a "-", entonces iniciamos con pm2 serve
        if ("${{ inputs.start_command }}" -eq "-") {
          ssh ${{ inputs.remote_user }}@${{ inputs.server_ip }} "pm2 serve ${{ inputs.project_path }}\$appName\build ${{ inputs.app_port }} --name $appName"
        } else {
          ssh ${{ inputs.remote_user }}@${{ inputs.server_ip }} "set PORT=${{ inputs.app_port }} && set NODE_PORT=${{ inputs.app_port }} && pm2 start ${{ inputs.project_path }}\$appName\${{ inputs.start_command }} --name $appName"
        }
      shell: powershell